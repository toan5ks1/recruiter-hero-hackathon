generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String           @id @default(cuid())
  name                   String?
  email                  String?          @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @default(now()) @map("updated_at")
  role                   UserRole         @default(USER)
  stripeCustomerId       String?          @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?          @unique @map("stripe_subscription_id")
  stripePriceId          String?          @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?        @map("stripe_current_period_end")
  accounts               Account[]
  jobDescriptions        JobDescription[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model JobDescription {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  userId    String
  cvs       CV[]
  user      User     @relation(fields: [userId], references: [id])

  @@map("job_descriptions")
}

model CV {
  id                   String           @id @default(cuid())
  jobDescriptionId     String
  fileUrl              String?
  totalScore           Float?
  uploadedAt           DateTime         @default(now())
  shortlisted          Boolean          @default(false)
  reviewerNote         String?
  content              String
  fileName             String
  interviewFeedback    Json?
  interviewNotes       String?
  interviewQuestions   Json?
  interviewScheduledAt DateTime?
  interviewStage       String?
  resume               Json
  score                Json
  status               String           @default("created")
  aiCallNotes          String?
  callResult           String?
  callStatus           String?
  lastCallDate         DateTime?
  aiCalls              AICall[]
  jobDescription       JobDescription   @relation(fields: [jobDescriptionId], references: [id])
  interviewRounds      InterviewRound[]

  @@map("cvs")
}

model InterviewRound {
  id               String    @id @default(cuid())
  cvId             String
  roundType        String
  scheduledAt      DateTime?
  durationMinutes  Int       @default(60)
  interviewerEmail String?
  interviewerName  String?
  status           String    @default("scheduled")
  questions        Json?
  feedback         Json?
  rating           Int?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  cv               CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("interview_rounds")
}

model AICall {
  id                 String    @id @default(cuid())
  cvId               String
  scheduledAt        DateTime
  startedAt          DateTime?
  endedAt            DateTime?
  duration           Int
  candidatePhone     String?
  aiVoice            String    @default("sarah")
  customInstructions String?
  questions          Json?
  transcript         Json?
  aiAnalysis         Json?
  status             String    @default("scheduled")
  result             String?
  score              Int?
  notes              String?
  createdBy          String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  candidateEmail     String?
  candidateName      String?
  interviewMode      String    @default("link") // "phone" or "link"
  interviewLink      String?   @unique
  linkGeneratedAt    DateTime?
  // Vapi integration fields
  vapiAssistantId    String?   // Vapi assistant ID for this interview
  vapiCallId         String?   // Vapi call ID when call is initiated
  vapiCallStatus     String?   // Vapi call status: queued, ringing, in-progress, ended
  vapiRecordingUrl   String?   // URL to the recorded interview
  vapiTranscript     String?   // Full transcript from Vapi
  vapiCost           Float?    // Cost breakdown from Vapi
  vapiSummary        String?   // AI-generated summary from Vapi
  cv                 CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("ai_calls")
}

enum UserRole {
  ADMIN
  USER
}
